substitutions:
  device_number: "3"
  device_ip: "192.168.10.154"

  # ADC pins on XIAO ESP32-C3
  moisture_pin_1: "GPIO2"   # A0
  moisture_pin_2: "GPIO3"   # A1
  moisture_pin_3: "GPIO4"   # A2
  battery_pin: "GPIO5"      # A3 for battery monitoring
  
  # Power management
  sleep_duration: "30min"   # How long to deep sleep between readings
  awake_duration: "20s"     # How long to stay awake for readings
  update_interval: "5s"     # Faster updates while awake

esphome:
  name: greenhouse-soil-battery-${device_number}
  friendly_name: Greenhouse Soil Monitor Battery ${device_number}
  comment: "Battery-powered VWC monitor with deep sleep"
  on_boot:
    priority: -100
    then:
      - wait_until:
          condition:
            wifi.connected:
      - delay: 2s
      - logger.log: "Boot complete, will take readings then sleep"

esp32:
  board: seeed_xiao_esp32c3
  framework:
    type: arduino

logger:
  level: INFO

api:
  encryption:
    key: !secret api_encryption_key

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
  manual_ip:
    static_ip: ${device_ip}
    gateway: 192.168.10.1
    subnet: 255.255.255.0
    dns1: 192.168.10.1
  ap:
    ssid: "Soil-Battery-${device_number}"
    password: !secret fallback_password

mqtt:
  broker: !secret mqtt_broker
  username: !secret mqtt_username
  password: !secret mqtt_password
  port: 1883
  topic_prefix: greenhouse/soilbat${device_number}
  birth_message:
    topic: greenhouse/soilbat${device_number}/status
    payload: online
    retain: true
  will_message:
    topic: greenhouse/soilbat${device_number}/status
    payload: offline
    retain: true

# Deep sleep configuration
deep_sleep:
  id: deep_sleep_control
  run_duration: ${awake_duration}
  sleep_duration: ${sleep_duration}

time:
  - platform: sntp
    timezone: "Europe/Oslo"

# Standard monitoring components
sensor:
  # WiFi signal strength monitoring
  - platform: wifi_signal
    name: "WiFi Signal"
    id: wifi_signal_sensor
    update_interval: ${update_interval}
    unit_of_measurement: "dBm"
    device_class: signal_strength
    entity_category: diagnostic

  # System uptime tracking
  - platform: uptime
    name: "Uptime"
    id: uptime_sensor
    device_class: duration
    entity_category: diagnostic

  # Battery monitoring
  - platform: adc
    pin: ${battery_pin}
    name: "Battery Voltage"
    id: battery_voltage
    attenuation: 11dB
    filters:
      - multiply: 2.0  # Adjust based on your voltage divider
      - sliding_window_moving_average:
          window_size: 3
          send_every: 1
    update_interval: ${update_interval}
    accuracy_decimals: 2
    unit_of_measurement: "V"
    device_class: voltage
    entity_category: diagnostic
    on_value:
      - mqtt.publish:
          topic: greenhouse/soilbat${device_number}/battery_voltage
          payload: !lambda 'return to_string(x);'
          retain: true

  - platform: template
    name: "Battery Level"
    id: battery_level
    lambda: |-
      float voltage = id(battery_voltage).state;
      // Li-ion: 4.2V = 100%, 3.0V = 0%
      if (voltage >= 4.2) return 100.0;
      if (voltage <= 3.0) return 0.0;
      return ((voltage - 3.0) / 1.2) * 100.0;
    update_interval: ${update_interval}
    unit_of_measurement: "%"
    device_class: battery
    accuracy_decimals: 0
    entity_category: diagnostic
    on_value:
      - mqtt.publish:
          topic: greenhouse/soilbat${device_number}/battery_level
          payload: !lambda 'return to_string(x);'
          retain: true
      # Adjust sleep duration based on battery level
      - if:
          condition:
            lambda: 'return x < 20.0;'
          then:
            - deep_sleep.prevent: deep_sleep_control
            - delay: 1s
            - deep_sleep.enter:
                id: deep_sleep_control
                sleep_duration: 60min  # Sleep longer when battery is low

  # Free heap memory monitoring
  - platform: template
    name: "Free Heap"
    id: free_heap
    lambda: 'return heap_caps_get_free_size(MALLOC_CAP_INTERNAL);'
    update_interval: ${update_interval}
    unit_of_measurement: "bytes"
    entity_category: diagnostic
    accuracy_decimals: 0

  # Boot counter for reliability tracking
  - platform: template
    name: "Boot Counter"
    id: boot_counter
    lambda: |-
      static uint32_t boot_count = 0;
      boot_count++;
      return boot_count;
    update_interval: never
    entity_category: diagnostic

  # -------- RAW ADC channels (internal only) --------
  - platform: adc
    id: s1_raw
    pin: ${moisture_pin_1}
    raw: true                 # return 0..4095 counts
    attenuation: 12db
    update_interval: ${update_interval}
    internal: true
    filters:
      - sliding_window_moving_average:
          window_size: 5
          send_every: 1

  - platform: adc
    id: s2_raw
    pin: ${moisture_pin_2}
    raw: true
    attenuation: 12db
    update_interval: ${update_interval}
    internal: true
    filters:
      - sliding_window_moving_average:
          window_size: 5
          send_every: 1

  - platform: adc
    id: s3_raw
    pin: ${moisture_pin_3}
    raw: true
    attenuation: 12db
    update_interval: ${update_interval}
    internal: true
    filters:
      - sliding_window_moving_average:
          window_size: 5
          send_every: 1

  # -------- VWC (piecewise linear from RAW using calibrate_linear) --------
  - platform: template
    name: "Soil VWC Sensor 1"
    id: soil_vwc_1
    unit_of_measurement: "%"
    device_class: moisture
    state_class: measurement
    accuracy_decimals: 1
    update_interval: ${update_interval}
    lambda: |-
      return id(s1_raw).state;          // feed RAW counts into filters below
    filters:
      # Map RAW counts -> %VWC (ascending RAW order: wet->dry)
      # NOTE: These calibration values need to be updated for your specific sensors
      - calibrate_linear:
          - 1345 -> 51.0
          - 1396 -> 45.0
          - 1556 -> 30.0
          - 3408 -> 0.0
      - sliding_window_moving_average:
          window_size: 3
          send_every: 1
      - lambda: |-
          // clamp to a sensible band
          if (x < 0.0f) x = 0.0f;
          if (x > 60.0f) x = 60.0f;
          return x;
    on_value:
      - mqtt.publish:
          topic: greenhouse/soilbat${device_number}/sensor1_vwc
          payload: !lambda 'return to_string(x);'
          retain: true

  - platform: template
    name: "Soil VWC Sensor 2"
    id: soil_vwc_2
    unit_of_measurement: "%"
    device_class: moisture
    state_class: measurement
    accuracy_decimals: 1
    update_interval: ${update_interval}
    lambda: |-
      return id(s2_raw).state;
    filters:
      # NOTE: These calibration values need to be updated for your specific sensors
      - calibrate_linear:
          - 1381 -> 51.0
          - 1454 -> 45.0
          - 1881 -> 30.0
          - 3457 -> 0.0
      - sliding_window_moving_average:
          window_size: 3
          send_every: 1
      - lambda: |-
          if (x < 0.0f) x = 0.0f;
          if (x > 60.0f) x = 60.0f;
          return x;
    on_value:
      - mqtt.publish:
          topic: greenhouse/soilbat${device_number}/sensor2_vwc
          payload: !lambda 'return to_string(x);'
          retain: true

  - platform: template
    name: "Soil VWC Sensor 3"
    id: soil_vwc_3
    unit_of_measurement: "%"
    device_class: moisture
    state_class: measurement
    accuracy_decimals: 1
    update_interval: ${update_interval}
    lambda: |-
      return id(s3_raw).state;
    filters:
      # NOTE: These calibration values need to be updated for your specific sensors
      - calibrate_linear:
          - 1390 -> 51.0
          - 1409 -> 45.0
          - 1662 -> 30.0
          - 3474 -> 0.0
      - sliding_window_moving_average:
          window_size: 3
          send_every: 1
      - lambda: |-
          if (x < 0.0f) x = 0.0f;
          if (x > 60.0f) x = 60.0f;
          return x;
    on_value:
      - mqtt.publish:
          topic: greenhouse/soilbat${device_number}/sensor3_vwc
          payload: !lambda 'return to_string(x);'
          retain: true

  # -------- Average VWC --------
  - platform: template
    name: "Average Soil VWC"
    id: soil_vwc_average
    unit_of_measurement: "%"
    device_class: moisture
    state_class: measurement
    accuracy_decimals: 1
    update_interval: ${update_interval}
    lambda: |-
      float s1 = id(soil_vwc_1).state;
      float s2 = id(soil_vwc_2).state;
      float s3 = id(soil_vwc_3).state;
      int n = 0;
      float sum = 0.0f;
      if (!isnan(s1)) { sum += s1; n++; }
      if (!isnan(s2)) { sum += s2; n++; }
      if (!isnan(s3)) { sum += s3; n++; }
      return n > 0 ? sum / n : NAN;
    on_value:
      - mqtt.publish:
          topic: greenhouse/soilbat${device_number}/average_vwc
          payload: !lambda 'return to_string(x);'
          retain: true

  # Hours since boot
  - platform: template
    name: "Hours Since Boot"
    lambda: 'return id(uptime_sensor).state / 3600.0;'
    update_interval: ${update_interval}
    unit_of_measurement: "h"
    accuracy_decimals: 1
    entity_category: diagnostic

  # Internal temperature monitoring (ESP32 built-in sensor)
  - platform: internal_temperature
    name: "Device Temperature"
    id: device_temperature
    update_interval: ${update_interval}
    entity_category: diagnostic

# Binary sensors for status
binary_sensor:
  # Device connectivity status
  - platform: status
    name: "Device Status"
    id: device_status
    device_class: connectivity

  # Low battery alert
  - platform: template
    name: "Low Battery Alert"
    id: low_battery_alert
    lambda: 'return id(battery_level).state < 20;'
    device_class: battery
    entity_category: diagnostic

  # Device overheating
  - platform: template
    name: "Device Overheating"
    lambda: 'return id(device_temperature).state > 70.0;'
    device_class: heat
    entity_category: diagnostic

# Manual controls
button:
  # Manual restart button
  - platform: restart
    name: "Restart Device"
    id: restart_button
    entity_category: config

# Switches
switch:
  # Safe mode switch for troubleshooting
  - platform: safe_mode
    name: "Safe Mode"
    id: safe_mode_switch
    entity_category: config

  # OTA mode switch (prevents deep sleep for firmware updates)
  - platform: template
    name: "OTA Mode"
    id: ota_mode
    icon: mdi:upload-network
    entity_category: config
    turn_on_action:
      - logger.log: "OTA mode enabled - deep sleep disabled"
      - deep_sleep.prevent: deep_sleep_control
    turn_off_action:
      - logger.log: "OTA mode disabled - deep sleep enabled"
      - deep_sleep.allow: deep_sleep_control

  # Force sleep switch
  - platform: template
    name: "Force Sleep"
    id: force_sleep
    icon: mdi:sleep
    entity_category: config
    turn_on_action:
      - deep_sleep.enter: deep_sleep_control

# Status LED for visual feedback (blinks during readings)
status_led:
  pin:
    number: GPIO10  # Built-in LED on XIAO ESP32-C3
    inverted: true

# Text sensor for reset reason
text_sensor:
  - platform: template
    name: "Last Reset Reason"
    id: reset_reason
    lambda: |-
      switch (esp_reset_reason()) {
        case ESP_RST_POWERON: return {"Power On"};
        case ESP_RST_EXT: return {"External Reset"};
        case ESP_RST_SW: return {"Software Reset"};
        case ESP_RST_PANIC: return {"Exception/Panic"};
        case ESP_RST_INT_WDT: return {"Interrupt Watchdog"};
        case ESP_RST_TASK_WDT: return {"Task Watchdog"};
        case ESP_RST_WDT: return {"Other Watchdog"};
        case ESP_RST_DEEPSLEEP: return {"Deep Sleep Wake"};
        case ESP_RST_BROWNOUT: return {"Brownout Reset"};
        case ESP_RST_SDIO: return {"SDIO Reset"};
        default: return {"Unknown"};
      }
    entity_category: diagnostic

# Periodic status reporting
interval:
  - interval: ${update_interval}
    then:
      - mqtt.publish:
          topic: greenhouse/soilbat${device_number}/diagnostics
          payload: !lambda |-
            char buffer[400];
            sprintf(buffer, 
              "{\"uptime\":%d,\"wifi_rssi\":%.0f,\"free_heap\":%d,\"temperature\":%.1f,\"battery_voltage\":%.2f,\"battery_level\":%.0f}",
              (int)id(uptime_sensor).state,
              id(wifi_signal_sensor).state,
              (int)id(free_heap).state,
              id(device_temperature).state,
              id(battery_voltage).state,
              id(battery_level).state
            );
            return std::string(buffer);
          retain: false