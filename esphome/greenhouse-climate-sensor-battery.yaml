substitutions:
  device_number: "3"
  device_ip: "192.168.10.155"
  dht_pin_1: "GPIO2"
  dht_pin_2: "GPIO3"
  battery_pin: "GPIO5"      # A3 for battery monitoring
  
  # Power management
  sleep_duration: "15min"   # Climate data doesn't change as rapidly as soil moisture
  awake_duration: "20s"     # Time to read sensors and transmit
  update_interval: "5s"     # Faster updates while awake

esphome:
  name: greenhouse-climate-battery-${device_number}
  friendly_name: Greenhouse Climate Sensor Battery ${device_number}
  comment: "Battery-powered climate monitor with dual DHT22 and deep sleep"
  on_boot:
    priority: -100
    then:
      - wait_until:
          condition:
            wifi.connected:
      - delay: 2s
      - logger.log: "Boot complete, will take readings then sleep"
  
esp32:
  board: seeed_xiao_esp32c3
  framework:
    type: arduino

# Enable logging
logger:
  level: INFO
  
# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_key
  reboot_timeout: 15min

# Enable OTA updates
ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
  
  manual_ip:
    static_ip: ${device_ip}
    gateway: 192.168.10.1
    subnet: 255.255.255.0
    dns1: 192.168.10.1
  
  # Fallback AP
  ap:
    ssid: "GH-Climate-Bat-${device_number}"
    password: !secret fallback_password

# MQTT configuration
mqtt:
  broker: !secret mqtt_broker
  username: !secret mqtt_username
  password: !secret mqtt_password
  port: 1883
  topic_prefix: greenhouse/climatebat${device_number}
  birth_message:
    topic: greenhouse/climatebat${device_number}/status
    payload: online
    retain: true
  will_message:
    topic: greenhouse/climatebat${device_number}/status
    payload: offline
    retain: true

# Deep sleep configuration
deep_sleep:
  id: deep_sleep_control
  run_duration: ${awake_duration}
  sleep_duration: ${sleep_duration}

time:
  - platform: sntp
    timezone: "Europe/Oslo"

sensor:
  # Standard monitoring components
  - platform: wifi_signal
    name: "WiFi Signal"
    id: wifi_signal_sensor
    update_interval: ${update_interval}
    unit_of_measurement: "dBm"
    device_class: signal_strength
    entity_category: diagnostic

  - platform: uptime
    name: "Uptime"
    id: uptime_sensor
    device_class: duration
    entity_category: diagnostic

  # Battery monitoring
  - platform: adc
    pin: ${battery_pin}
    name: "Battery Voltage"
    id: battery_voltage
    attenuation: 11dB
    filters:
      - multiply: 2.0  # Adjust based on your voltage divider
      - sliding_window_moving_average:
          window_size: 3
          send_every: 1
    update_interval: ${update_interval}
    accuracy_decimals: 2
    unit_of_measurement: "V"
    device_class: voltage
    entity_category: diagnostic
    on_value:
      - mqtt.publish:
          topic: greenhouse/climatebat${device_number}/battery_voltage
          payload: !lambda 'return to_string(x);'
          retain: true

  - platform: template
    name: "Battery Level"
    id: battery_level
    lambda: |-
      float voltage = id(battery_voltage).state;
      // Li-ion: 4.2V = 100%, 3.0V = 0%
      if (voltage >= 4.2) return 100.0;
      if (voltage <= 3.0) return 0.0;
      return ((voltage - 3.0) / 1.2) * 100.0;
    update_interval: ${update_interval}
    unit_of_measurement: "%"
    device_class: battery
    accuracy_decimals: 0
    entity_category: diagnostic
    on_value:
      - mqtt.publish:
          topic: greenhouse/climatebat${device_number}/battery_level
          payload: !lambda 'return to_string(x);'
          retain: true
      # Adjust sleep duration based on battery level
      - if:
          condition:
            lambda: 'return x < 20.0;'
          then:
            - deep_sleep.prevent: deep_sleep_control
            - delay: 1s
            - deep_sleep.enter:
                id: deep_sleep_control
                sleep_duration: 30min  # Sleep longer when battery is low

  # Free heap memory monitoring
  - platform: template
    name: "Free Heap"
    id: free_heap
    lambda: 'return heap_caps_get_free_size(MALLOC_CAP_INTERNAL);'
    update_interval: ${update_interval}
    unit_of_measurement: "bytes"
    entity_category: diagnostic
    accuracy_decimals: 0

  # Boot counter
  - platform: template
    name: "Boot Counter"
    id: boot_counter
    lambda: |-
      static uint32_t boot_count = 0;
      boot_count++;
      return boot_count;
    update_interval: never
    entity_category: diagnostic

  # Internal temperature monitoring
  - platform: internal_temperature
    name: "Device Temperature"
    id: device_temperature
    update_interval: ${update_interval}
    entity_category: diagnostic

  # DHT22 Sensor 1
  - platform: dht
    pin: ${dht_pin_1}
    model: DHT22
    temperature:
      name: "Temperature 1"
      id: temp1
      accuracy_decimals: 1
      filters:
        - sliding_window_moving_average:
            window_size: 3
            send_every: 1
      on_value:
        then:
          - mqtt.publish:
              topic: greenhouse/climatebat${device_number}/temp1
              payload: !lambda 'return to_string(x);'
              retain: true
    humidity:
      name: "Humidity 1"
      id: hum1
      accuracy_decimals: 1
      filters:
        - sliding_window_moving_average:
            window_size: 3
            send_every: 1
      on_value:
        then:
          - mqtt.publish:
              topic: greenhouse/climatebat${device_number}/hum1
              payload: !lambda 'return to_string(x);'
              retain: true
    update_interval: ${update_interval}
    
  # DHT22 Sensor 2
  - platform: dht
    pin: ${dht_pin_2}
    model: DHT22
    temperature:
      name: "Temperature 2"
      id: temp2
      accuracy_decimals: 1
      filters:
        - sliding_window_moving_average:
            window_size: 3
            send_every: 1
      on_value:
        then:
          - mqtt.publish:
              topic: greenhouse/climatebat${device_number}/temp2
              payload: !lambda 'return to_string(x);'
              retain: true
    humidity:
      name: "Humidity 2"
      id: hum2
      accuracy_decimals: 1
      filters:
        - sliding_window_moving_average:
            window_size: 3
            send_every: 1
      on_value:
        then:
          - mqtt.publish:
              topic: greenhouse/climatebat${device_number}/hum2
              payload: !lambda 'return to_string(x);'
              retain: true
    update_interval: ${update_interval}
    
  # Average temperature
  - platform: template
    name: "Average Temperature"
    id: temp_avg
    lambda: |-
      if (!isnan(id(temp1).state) && !isnan(id(temp2).state)) {
        return (id(temp1).state + id(temp2).state) / 2.0;
      } else if (!isnan(id(temp1).state)) {
        return id(temp1).state;
      } else if (!isnan(id(temp2).state)) {
        return id(temp2).state;
      } else {
        return NAN;
      }
    update_interval: ${update_interval}
    unit_of_measurement: "Â°C"
    accuracy_decimals: 1
    on_value:
      then:
        - mqtt.publish:
            topic: greenhouse/climatebat${device_number}/temperature
            payload: !lambda 'return to_string(x);'
            retain: true
        - mqtt.publish:
            topic: greenhouse/climatebat${device_number}/sensor
            payload: !lambda |-
              char buf[200];
              sprintf(buf, "{\"temperature\":%.1f,\"humidity\":%.1f,\"battery\":%.0f}", 
                      x, id(hum_avg).state, id(battery_level).state);
              return std::string(buf);
            retain: true
    
  # Average humidity
  - platform: template
    name: "Average Humidity"
    id: hum_avg
    lambda: |-
      if (!isnan(id(hum1).state) && !isnan(id(hum2).state)) {
        return (id(hum1).state + id(hum2).state) / 2.0;
      } else if (!isnan(id(hum1).state)) {
        return id(hum1).state;
      } else if (!isnan(id(hum2).state)) {
        return id(hum2).state;
      } else {
        return NAN;
      }
    update_interval: ${update_interval}
    unit_of_measurement: "%"
    accuracy_decimals: 1
    on_value:
      then:
        - mqtt.publish:
            topic: greenhouse/climatebat${device_number}/humidity
            payload: !lambda 'return to_string(x);'
            retain: true

  # Hours since boot
  - platform: template
    name: "Hours Since Boot"
    lambda: 'return id(uptime_sensor).state / 3600.0;'
    update_interval: ${update_interval}
    unit_of_measurement: "h"
    accuracy_decimals: 1
    entity_category: diagnostic

# Binary sensors
binary_sensor:
  # Device connectivity status
  - platform: status
    name: "Device Status"
    id: device_status
    device_class: connectivity

  # Low battery alert
  - platform: template
    name: "Low Battery Alert"
    id: low_battery_alert
    lambda: 'return id(battery_level).state < 20;'
    device_class: battery
    entity_category: diagnostic

  # Device overheating
  - platform: template
    name: "Device Overheating"
    lambda: 'return id(device_temperature).state > 70.0;'
    device_class: heat
    entity_category: diagnostic

# Status LED using built-in LED
status_led:
  pin:
    number: GPIO10  # Built-in LED on XIAO ESP32-C3
    inverted: true

# Buttons
button:
  - platform: restart
    name: "Restart Device"
    id: restart_button
    entity_category: config

# Switches
switch:
  # Safe mode switch
  - platform: safe_mode
    name: "Safe Mode"
    id: safe_mode_switch
    entity_category: config

  # OTA mode switch (prevents deep sleep)
  - platform: template
    name: "OTA Mode"
    id: ota_mode
    icon: mdi:upload-network
    entity_category: config
    turn_on_action:
      - logger.log: "OTA mode enabled - deep sleep disabled"
      - deep_sleep.prevent: deep_sleep_control
    turn_off_action:
      - logger.log: "OTA mode disabled - deep sleep enabled"
      - deep_sleep.allow: deep_sleep_control

  # Force sleep switch
  - platform: template
    name: "Force Sleep"
    id: force_sleep
    icon: mdi:sleep
    entity_category: config
    turn_on_action:
      - deep_sleep.enter: deep_sleep_control

# Text sensors
text_sensor:
  - platform: version
    name: "ESPHome Version"
    on_value:
      then:
        - mqtt.publish:
            topic: greenhouse/climatebat${device_number}/version
            payload: !lambda 'return x;'
            retain: true
  
  - platform: wifi_info
    ip_address:
      name: "IP Address"
      entity_category: diagnostic

  - platform: template
    name: "Last Reset Reason"
    id: reset_reason
    lambda: |-
      switch (esp_reset_reason()) {
        case ESP_RST_POWERON: return {"Power On"};
        case ESP_RST_EXT: return {"External Reset"};
        case ESP_RST_SW: return {"Software Reset"};
        case ESP_RST_PANIC: return {"Exception/Panic"};
        case ESP_RST_INT_WDT: return {"Interrupt Watchdog"};
        case ESP_RST_TASK_WDT: return {"Task Watchdog"};
        case ESP_RST_WDT: return {"Other Watchdog"};
        case ESP_RST_DEEPSLEEP: return {"Deep Sleep Wake"};
        case ESP_RST_BROWNOUT: return {"Brownout Reset"};
        case ESP_RST_SDIO: return {"SDIO Reset"};
        default: return {"Unknown"};
      }
    entity_category: diagnostic

# Periodic status reporting
interval:
  - interval: ${update_interval}
    then:
      - mqtt.publish:
          topic: greenhouse/climatebat${device_number}/diagnostics
          payload: !lambda |-
            char buffer[400];
            sprintf(buffer, 
              "{\"uptime\":%d,\"wifi_rssi\":%.0f,\"free_heap\":%d,\"device_temp\":%.1f,\"battery_voltage\":%.2f,\"battery_level\":%.0f,\"temp\":%.1f,\"humidity\":%.1f}",
              (int)id(uptime_sensor).state,
              id(wifi_signal_sensor).state,
              (int)id(free_heap).state,
              id(device_temperature).state,
              id(battery_voltage).state,
              id(battery_level).state,
              id(temp_avg).state,
              id(hum_avg).state
            );
            return std::string(buffer);
          retain: false