substitutions:
  device_name: "soil-calibration"
  # Use only ADC-capable pins on XIAO ESP32C3; avoid GPIO5 if possible.
  s1_pin: "GPIO2"   # A0
  s2_pin: "GPIO3"   # A1
  s3_pin: "GPIO4"   # A2

esphome:
  name: ${device_name}
  friendly_name: Soil Moisture Calibration

esp32:
  board: seeed_xiao_esp32c3
  framework:
    type: arduino

logger:
  level: DEBUG

api:
  encryption:
    key: !secret api_encryption_key

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "Soil-Calibration-Fallback"
    password: !secret fallback_password

web_server:

time:
  - platform: sntp

# --------- Calibration points (raw ADC counts) for each sensor ---------
globals:
  # Sensor 1
  - { id: s1_vwc_0,  type: float, restore_value: yes, initial_value: '2800' }  # ~dry
  - { id: s1_vwc_30, type: float, restore_value: yes, initial_value: '2100' }
  - { id: s1_vwc_45, type: float, restore_value: yes, initial_value: '1600' }
  - { id: s1_vwc_60, type: float, restore_value: yes, initial_value: '1000' }  # ~container capacity

  # Sensor 2
  - { id: s2_vwc_0,  type: float, restore_value: yes, initial_value: '2800' }
  - { id: s2_vwc_30, type: float, restore_value: yes, initial_value: '2100' }
  - { id: s2_vwc_45, type: float, restore_value: yes, initial_value: '1600' }
  - { id: s2_vwc_60, type: float, restore_value: yes, initial_value: '1000' }

  # Sensor 3
  - { id: s3_vwc_0,  type: float, restore_value: yes, initial_value: '2800' }
  - { id: s3_vwc_30, type: float, restore_value: yes, initial_value: '2100' }
  - { id: s3_vwc_45, type: float, restore_value: yes, initial_value: '1600' }
  - { id: s3_vwc_60, type: float, restore_value: yes, initial_value: '1000' }

sensor:
  # --------- RAW ADC (returns 0..4095) ---------
  - platform: adc
    id: s1_adc_raw
    name: "S1 ADC (raw)"
    pin: ${s1_pin}
    raw: true
    attenuation: 11dB
    update_interval: 1s
    filters:
      - sliding_window_moving_average:
          window_size: 10
          send_every: 2

  - platform: adc
    id: s2_adc_raw
    name: "S2 ADC (raw)"
    pin: ${s2_pin}
    raw: true
    attenuation: 11dB
    update_interval: 1s
    filters:
      - sliding_window_moving_average:
          window_size: 10
          send_every: 2

  - platform: adc
    id: s3_adc_raw
    name: "S3 ADC (raw)"
    pin: ${s3_pin}
    raw: true
    attenuation: 11dB
    update_interval: 1s
    filters:
      - sliding_window_moving_average:
          window_size: 10
          send_every: 2

  # --------- VWC interpolation (0 → 30 → 45 → 60 %) ---------
  # If your probes read higher when WET (instead of lower), invert the comparisons noted below.
  - platform: template
    name: "S1 VWC"
    id: s1_vwc
    unit_of_measurement: "% VWC"
    state_class: measurement
    device_class: moisture
    accuracy_decimals: 1
    update_interval: 2s
    lambda: |-
      const float r   = id(s1_adc_raw).state;
      const float x0  = id(s1_vwc_0);
      const float x30 = id(s1_vwc_30);
      const float x45 = id(s1_vwc_45);
      const float x60 = id(s1_vwc_60);

      // Assumes RAW is HIGHER when dry and LOWER when wet (common on capacitive probes).
      if (r >= x0) return 0.0f;    // drier than "dry"
      if (r <= x60) return 60.0f;  // wetter than container capacity

      if (r > x30) {
        return 30.0f * (r - x0) / (x30 - x0);
      } else if (r > x45) {
        return 30.0f + 15.0f * (r - x30) / (x45 - x30);
      } else {
        return 45.0f + 15.0f * (r - x45) / (x60 - x45);
      }

  - platform: template
    name: "S2 VWC"
    id: s2_vwc
    unit_of_measurement: "% VWC"
    state_class: measurement
    device_class: moisture
    accuracy_decimals: 1
    update_interval: 2s
    lambda: |-
      const float r   = id(s2_adc_raw).state;
      const float x0  = id(s2_vwc_0);
      const float x30 = id(s2_vwc_30);
      const float x45 = id(s2_vwc_45);
      const float x60 = id(s2_vwc_60);

      if (r >= x0) return 0.0f;
      if (r <= x60) return 60.0f;

      if (r > x30) {
        return 30.0f * (r - x0) / (x30 - x0);
      } else if (r > x45) {
        return 30.0f + 15.0f * (r - x30) / (x45 - x30);
      } else {
        return 45.0f + 15.0f * (r - x45) / (x60 - x45);
      }

  - platform: template
    name: "S3 VWC"
    id: s3_vwc
    unit_of_measurement: "% VWC"
    state_class: measurement
    device_class: moisture
    accuracy_decimals: 1
    update_interval: 2s
    lambda: |-
      const float r   = id(s3_adc_raw).state;
      const float x0  = id(s3_vwc_0);
      const float x30 = id(s3_vwc_30);
      const float x45 = id(s3_vwc_45);
      const float x60 = id(s3_vwc_60);

      if (r >= x0) return 0.0f;
      if (r <= x60) return 60.0f;

      if (r > x30) {
        return 30.0f * (r - x0) / (x30 - x0);
      } else if (r > x45) {
        return 30.0f + 15.0f * (r - x30) / (x45 - x30);
      } else {
        return 45.0f + 15.0f * (r - x45) / (x60 - x45);
      }

# --------- Calibration buttons ---------
button:
  # Capture ALL three sensors at once (use when all probes are in the same known VWC medium)
  - platform: template
    name: "Calibrate ALL → 0% VWC (dry)"
    on_press:
      then:
        - globals.set: { id: s1_vwc_0,  value: !lambda 'return id(s1_adc_raw).state;' }
        - globals.set: { id: s2_vwc_0,  value: !lambda 'return id(s2_adc_raw).state;' }
        - globals.set: { id: s3_vwc_0,  value: !lambda 'return id(s3_adc_raw).state;' }

  - platform: template
    name: "Calibrate ALL → 30% VWC"
    on_press:
      then:
        - globals.set: { id: s1_vwc_30, value: !lambda 'return id(s1_adc_raw).state;' }
        - globals.set: { id: s2_vwc_30, value: !lambda 'return id(s2_adc_raw).state;' }
        - globals.set: { id: s3_vwc_30, value: !lambda 'return id(s3_adc_raw).state;' }

  - platform: template
    name: "Calibrate ALL → 45% VWC"
    on_press:
      then:
        - globals.set: { id: s1_vwc_45, value: !lambda 'return id(s1_adc_raw).state;' }
        - globals.set: { id: s2_vwc_45, value: !lambda 'return id(s2_adc_raw).state;' }
        - globals.set: { id: s3_vwc_45, value: !lambda 'return id(s3_adc_raw).state;' }

  - platform: template
    name: "Calibrate ALL → 60% VWC"
    on_press:
      then:
        - globals.set: { id: s1_vwc_60, value: !lambda 'return id(s1_adc_raw).state;' }
        - globals.set: { id: s2_vwc_60, value: !lambda 'return id(s2_adc_raw).state;' }
        - globals.set: { id: s3_vwc_60, value: !lambda 'return id(s3_adc_raw).state;' }

  # Optional: quick per-sensor capture buttons (uncomment if you prefer individual capture)
  # - platform: template
  #   name: "S1 capture → current as 30% VWC"
  #   on_press: { then: [ globals.set: { id: s1_vwc_30, value: !lambda 'return id(s1_adc_raw).state;' } ] }
  # (repeat for other points/sensors as needed)

  - platform: template
    name: "Reset calibration to defaults"
    on_press:
      then:
        - globals.set: { id: s1_vwc_0,  value: '2800' }
        - globals.set: { id: s1_vwc_30, value: '2100' }
        - globals.set: { id: s1_vwc_45, value: '1600' }
        - globals.set: { id: s1_vwc_60, value: '1000' }
        - globals.set: { id: s2_vwc_0,  value: '2800' }
        - globals.set: { id: s2_vwc_30, value: '2100' }
        - globals.set: { id: s2_vwc_45, value: '1600' }
        - globals.set: { id: s2_vwc_60, value: '1000' }
        - globals.set: { id: s3_vwc_0,  value: '2800' }
        - globals.set: { id: s3_vwc_30, value: '2100' }
        - globals.set: { id: s3_vwc_45, value: '1600' }
        - globals.set: { id: s3_vwc_60, value: '1000' }

# --------- Handy text readouts of the stored points ---------
text_sensor:
  - platform: template
    name: "S1 cal points (raw)"
    update_interval: 5s
    lambda: |-
      char buf[64];
      snprintf(buf, sizeof(buf), "0:%0.0f  30:%0.0f  45:%0.0f  60:%0.0f",
               id(s1_vwc_0), id(s1_vwc_30), id(s1_vwc_45), id(s1_vwc_60));
      return {buf};

  - platform: template
    name: "S2 cal points (raw)"
    update_interval: 5s
    lambda: |-
      char buf[64];
      snprintf(buf, sizeof(buf), "0:%0.0f  30:%0.0f  45:%0.0f  60:%0.0f",
               id(s2_vwc_0), id(s2_vwc_30), id(s2_vwc_45), id(s2_vwc_60));
      return {buf};

  - platform: template
    name: "S3 cal points (raw)"
    update_interval: 5s
    lambda: |-
      char buf[64];
      snprintf(buf, sizeof(buf), "0:%0.0f  30:%0.0f  45:%0.0f  60:%0.0f",
               id(s3_vwc_0), id(s3_vwc_30), id(s3_vwc_45), id(s3_vwc_60));
      return {buf};
